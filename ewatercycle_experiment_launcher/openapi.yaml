openapi: 3.0.0
info:
  version: 0.2.0
  title: eWaterCycle Experiment Launcher
  description: Webservice to generate and launch a Jupyter notebook
security:
  - jwt: [ 'secret' ]
paths:
  /auth:
    post:
      summary: Authenicate and return JWT token
      operationId: ewatercycle_experiment_launcher.auth.generate_token
      security:
        - BasicAuth: []
      responses:
        '200':
          $ref: '#/components/responses/AuthResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /hello:
    post:
      summary: Notebook that prints Hello World
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelloRequest'
        description: The notebook to create
      responses:
        '200':
          $ref: '#/components/responses/NotebookResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /pyewatercycle:
    post:
      summary: Run model on parameter set and forcing using eWatercycle Python package with hydrograph against an GRDC observation station
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PyewatercycleRequest'
        description: The notebook to create
      responses:
        '200':
          $ref: '#/components/responses/NotebookResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  securitySchemes:
    BasicAuth:
      type: http
      x-basicInfoFunc: ewatercycle_experiment_launcher.auth.check_basic_auth
      scheme: basic
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: ewatercycle_experiment_launcher.auth.decode_token
  responses:
      AuthResponse:
          description: Successfully authenticated
          content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/AuthResponse'
      NotebookResponse:
          description: Started Jupyter server and created notebook
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/NotebookResponse'
      ErrorResponse:
          description: Unexpected error
          content:
              application/problem+json:
                  schema:
                      $ref: '#/components/schemas/Error'
  schemas:
    AuthResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
      additionalProperties: false
    NotebookRequest:
      type: object
      required:
        - directory
      properties:
        directory:
          type: string
          description: Name of directory inside Jupyter Lab
          example: somedirectory
          minLength: 1
        filename:
          type: string
          description: Name of notebook
          default: experiment.ipynb
          example: experiment.ipynb
          minLength: 1
        workspace:
          type: string
          description: >-
            Name of workspace, if absent will generate random workspace to
            prevent already in use dialog
          example: foo
          minLength: 1
          pattern: '[^/]'
      additionalProperties: false
    NotebookResponse:
      type: object
      properties:
        location:
          type: string
          format: uri
          description: URL of experiment notebook on Jupyter Hub/Lab server
      required:
        - location
      additionalProperties: false
    Error:
      type: object
      description: >-
        Problem Details for HTTP APIs, see
        https://tools.ietf.org/html/draft-ietf-appsawg-http-problem-00
      properties:
        status:
          type: integer
          format: int32
        type:
          type: string
        detail:
          type: string
        title:
          type: string
      required:
        - status
        - type
        - title
        - detail
      additionalProperties: true
    HelloRequest:
      type: object
      properties:
        notebook:
          $ref: '#/components/schemas/NotebookRequest'
      required:
        - notebook
      additionalProperties: false
    PyewatercycleRequest:
      type: object
      required:
        - notebook
        - setup
      additionalProperties: false
      properties:
        notebook:
          $ref: '#/components/schemas/NotebookRequest'
        setup:
          type: object
          required:
            - model
            - variable
            - observation
          additionalProperties: false
          properties:
            model:
              type: object
              required:
                - name
                - version
              properties:
                name:
                  type: string
                  description: Name of model as defined in ewatercycle.models module
                  example: PCRGlobWB
                version:
                  type: string
                  description: Version of model to use
                  example: setters
                lumped:
                  type: boolean
                  description: Whether model is lumped or non-lumped model
                  default: false
              additionalProperties: false
            forcing:
                type: string
                description: Directory name of forcing. Directory should contain `ewatercycle_forcing.yaml` file.
                example: marrmot-m01_example_1989-1992_buffalo-river
            parameter_set:
                type: string
                description: Name of parameter set. Should be one of names returned by `ewatercycle.parameter_sets.available_parameter_sets()`.
                example: 'pcrglobwb_rhinemeuse_30min'
            variable:
                type: string
                description: Name of output variable of model used for assessment
                example: discharge
            observation:
              type: object
              additionalProperties: false
              required:
                - station_id
              properties:
                station_id:
                  description: GRCD observation station identifier.
                  type: string
                  example: '6335020'
                model_location:
                  type: object
                  description: Location which matches model outlet pixel closest to observation station. If not given then uses exact location of station.
                  properties:
                    longitude:
                        type: number
                        example: 6.395395
                    latitude:
                        type: number
                        example: 51.756918
                  required:
                    - longitude
                    - latitude
                  additionalProperties: false
