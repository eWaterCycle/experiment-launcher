import textwrap

from nbformat import NotebookNode
from nbformat.v4 import new_markdown_cell, new_code_cell, new_notebook

from ewatercycle_experiment_launcher.generate import PY3_META
from ewatercycle_experiment_launcher.process import process_notebook


def assessment_notebook(setup) -> NotebookNode:
    """Generates a Jupyter notebook"""
    welcome = textwrap.dedent("""
            # Welcome

            This notebook was generated by the eWaterCycle experiment launcher.

            The notebook runs a hydrology model using [grpc4bmi](https://github.com/eWaterCycle/grpc4bmi)
            and assesses the model against observations in a Hydrograph plot.

            """)
    cells = [
        new_markdown_cell(welcome),
        new_code_cell(textwrap.dedent("""\
                    import numpy.ma as ma
                    import numpy as np
                    import matplotlib.pyplot as plt
                    import cftime
                    from bokeh.plotting import output_notebook, figure, show

                    from ewatercycle.parametersetdb import build_from_urls
                    from grpc4bmi.bmi_client_docker import BmiClientDocker""")),
        new_code_cell(textwrap.dedent("""\
                    # Prepare input
                    parameter_set = build_from_urls(
                        config_format='{0}', config_url='{1}',
                        datafiles_format='{2}', datafiles_url='{3}',
                    )""".format(setup['config']['format'], setup['config']['url'],
                                                                      setup['datafiles']['format'],
                                                                      setup['datafiles']['url'],
                                                                      )
                                      )),
        new_code_cell(textwrap.dedent("""\
                    # Save data files
                    parameter_set.save_datafiles('./input')""")),
        new_code_cell(textwrap.dedent("""\
                    # Overwrite items in config file
                    # parameter_set.config['...']['...'] = '...'""")),
    ]

    model_name = setup['model']['name']
    config_fn = 'config.cfg'
    if model_name == 'wflow':
        config_fn = 'wflow_sbm.ini'
        cells += [
            new_code_cell(textwrap.dedent("""\
                # The model inside a BMI Docker container expects the datafiles in the /data/input directory,
                # the config file must be adjusted to that

                # For wflow model the config file must be set with
                parameter_set.config['model']['configfile'] = '/data/input/{0}'""".format(config_fn))),
        ]
    elif model_name == 'Walrus':
        cells += [
            new_code_cell(textwrap.dedent("""\
                # The model inside a BMI Docker container expects the datafiles in the /data/input directory,
                # the config file must be adjusted to that

                # For Walrus model the data file must be set with
                import os
                parameter_set.config['data'] = '/data/input/' + os.listdir('input')[0]""")),
        ]
    elif model_name == 'PCR-GLOBWB':
        cells += [
            new_code_cell(textwrap.dedent("""\
                # The model inside a BMI Docker container expects the datafiles in the /data/input directory,
                # the config file must be adjusted to that

                # For PCR-GLOBWB model the input and output directory must be set with
                parameter_set.config['globalOptions']['inputDir'] = '/data/input'
                parameter_set.config['globalOptions']['outputDir'] = '/data/output'""")),
        ]
    station_id = setup['assessment']['station_id']
    cells += [
        new_code_cell(textwrap.dedent("""\
                    # Save config file
                    parameter_set.save_config('{0}')""".format(config_fn))),
        new_code_cell(textwrap.dedent("""\
                    # Startup model
                    model = BmiClientDocker(image='{0}', image_port=55555,
                                            input_dir="./input",
                                            output_dir="./output")
                    model.initialize('{1}')""".format(setup['model']['grpc4bmi_container'], config_fn)
                                      )),
        new_code_cell(textwrap.dedent("""\
                    # Evolve model and capture variable {0} at index {1} for each time step
                    variable = '{0}'
                    index_of_variable = np.array([{1}])
                    variable_overtime = []
                    tend = model.get_end_time()
                    while model.get_current_time() < tend:
                        model.update()
                        value_at_pixel = model.get_value_at_indices(variable, index_of_variable)[0]
                        variable_overtime.append((model.get_current_time(), value_at_pixel))
                    """.format(setup['assessment']['variable'], setup['assessment']['index']))),
        new_code_cell(textwrap.dedent("""\
                    # Plot variable {0} on last time step
                    vals = model.get_value(variable)
                    unit = model.get_var_units(variable)
                    shape = model.get_grid_shape(model.get_var_grid(variable))""".format(setup['assessment']['variable']))),
        new_code_cell(textwrap.dedent("""\
                    X, Y = np.arange(shape[1]), np.arange(shape[0])
                    Z = np.reshape(ma.masked_where(vals == np.nan, vals), shape)
                    plt.title(variable + '[' + unit + ']')
                    plt.pcolormesh(X,Y,Z)
                    plt.colorbar()
                    plt.plot()""")),
        new_code_cell(textwrap.dedent("""\
            station_id = '{0}'
            tstart = model.get_start_time()
            time_unit = model.get_time_units()""".format(station_id)))
    ]
    assessment_source = setup['assessment']['source']
    if assessment_source == 'grdc':
        cells += [
            new_code_cell(textwrap.dedent("""\
                from ewatercycle.observation.grdc import get_grdc_data
                observations = get_grdc_data(
                    station_id,
                    str(cftime.num2date(tstart, time_unit).date),
                    str(cftime.num2date(tend, time_unit).date)
                )
                """)),
        ]
    elif assessment_source == 'usgs':
        cells += [
            new_code_cell(textwrap.dedent("""\
                from ewatercycle.observation.usgs import get_usgs_data
                observations = get_usgs_data(
                    station_id,
                    str(cftime.num2date(tstart, time_unit).date),
                    str(cftime.num2date(tend, time_unit).date)
                )
                """)),
        ]

    # TODO replace plot with hydrograph plot from hydrostats package
    cells += [
        new_code_cell(textwrap.dedent("""\
                    # Plot variable {0} at index {1} for each time step
                    output_notebook()
    
                    time_unit = model.get_time_units()
                    p = figure(plot_width=800, plot_height=400, x_axis_type="datetime")
                    p.yaxis.axis_label = variable + '[' + unit + ']'
                    p.line([cftime.num2date(d[0], time_unit) for d in variable_overtime], [d[1] for d in variable_overtime] , line_width=2)
                    show(p)""".format(setup['assessment']['variable'], setup['assessment']['index']))),
        new_code_cell(textwrap.dedent("""\
                    # Stop the Docker container
                    del model"""))

    ]
    return new_notebook(cells=cells, metadata=PY3_META)


def post(body):
    """Generate notebook and launch it

    Args:
        body: The json POST body as a Python object
    """
    nb = assessment_notebook(body['setup'])
    return process_notebook(body['notebook'], nb)
